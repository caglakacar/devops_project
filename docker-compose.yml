services:

  influxdb:
    image: influxdb:${INFLUXDB_VERSION}
    container_name: influxdbv2
    ports:
      - "8086:8086" 
    volumes:
      - "./data/influxdbv2/lib:/var/lib/influxdb2"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup 
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_INIT_USERNAME} 
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_INIT_PASSWORD} 
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_INIT_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_INIT_BUCKET}
      DOCKER_INFLUXDB_INIT_RETENTION: ${INFLUXDB_INIT_RETENTION} 
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_INIT_ADMIN_TOKEN}
    networks:
      - service_net 
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    container_name: grafana
    ports:
      - "3000:3000" 
    volumes:
      - "./data/grafana/data:/var/lib/grafana" 
      - "./data/grafana/provisioning:/etc/grafana/provisioning" 
    environment:
      - TZ=${TZ}
    networks:
      - service_net 
      - zbx_net
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "https://localhost:3000/api/health"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  nodered:
    image: nodered/node-red:${NODERED_VERSION}
    container_name: node-red
    ports:
      - "1880:1880" 
    volumes:
      - "./data/node-red:/data"
    environment:
      - TZ=${TZ}
    networks:
      - service_net 
      - zbx_net

  telegraf:
    build: ./data/telegraf
    container_name: telegraf
    ports:
      - "5000:5000"
      - "8125:8125"
      - "8092:8092"
      - "8094:8094"
    # network_mode: "host" 
    restart: always
    volumes:
      - "./data/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:rw"
    networks:
      - service_net

# -ZABBIX SERVICES-
  postgresql-server:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgresql-server
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./data/postgresql:/var/lib/postgresql/data
    networks:
      - zbx_net

  zabbix-server:
    image: zabbix/zabbix-server-pgsql:${ZABBIX_SERVER_VERSION}
    container_name: zabbix-server
    restart: unless-stopped
    depends_on:
      - postgresql-server
    environment:
      DB_SERVER_HOST: postgresql-server
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "10051:10051"
    volumes:
      - ./data/zabbix-server:/var/lib/zabbix
      - ./data/zabbix-server:/var/lib/zabbix/snmptraps
      - ./data/zabbix-server:/var/lib/zabbix/export
    networks:
      - zbx_net
      - service_net  

  zabbix-web-nginx-pgsql:
    image: zabbix/zabbix-web-nginx-pgsql:${ZABBIX_WEB_VERSION}
    container_name: zabbix-web
    restart: unless-stopped
    depends_on:
      - postgresql-server
      - zabbix-server
    environment:
      DB_SERVER_HOST: postgresql-server
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      ZBX_SERVER_HOST: zabbix-server
      PHP_TZ: ${TZ}
    ports:
      - "${ZABBIX_FRONTEND_PORT}:8080"
    volumes:
      - ./data/zabbix-web:/usr/share/zabbix/ui
    networks:
      - zbx_net
      - service_net

  zabbix-agent:
    image: zabbix/zabbix-agent2:${ZABBIX_AGENT_VERSION}
    container_name: zabbix-agent
    restart: unless-stopped
    depends_on:
      - zabbix-server
    environment:
      ZBX_HOSTNAME: "zabbix-agent"
      ZBX_SERVER_HOST: zabbix-server
      ZBX_SERVER_PORT: '10051'
      ZBX_SERVER_ACTIVE: zabbix-server
    networks:
      - zbx_net

networks:
  zbx_net:
    driver: bridge

  service_net:
    driver: bridge